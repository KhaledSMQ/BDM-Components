input {
    file {
        path => "/PATH/remote_Syslog5424_UDP_8009.log"
        type => "linux-syslog"
    }
    file {
        path => "/PATH/remote_Syslog5424_TCP_8009.log"
        type => "linux-syslog"
    }
    
    file {
        path => "/PATH/remote_FireEye_UDP_8008.log"
        type => "linux-syslog"
    }
    file {
        path => "/PATH/remote_FireEye_TCP_8008.log"
        type => "linux-syslog"
    }
    
    file {
        path => "/PATH/remote_IPS_UDP_8010.log"
        type => "linux-syslog"
    }
    file {
        path => "/PATH/remote_IPS_TCP_8010.log"
        type => "linux-syslog"
    }

    file {
        path => "/PATH/remote_Radius_UDP_8012.log"
        type => "linux-syslog"
    }
    file {
        path => "/PATH/remote_Radius_TCP_8012.log"
        type => "linux-syslog"
    }
    file {
        path => "/PATH/remote_Tacacs_UDP_8013.log"
        type => "linux-syslog"
    }
}

filter {
    if [path] == "/PATH/remote_Syslog5424_UDP_8009.log" or [path] == "/PATH/remote_Syslog5424_TCP_8009.log" {
        grok {
            patterns_dir => "/PATH/patterns"
            keep_empty_captures => true
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp} v\.(?<version>[0-9]+) %{SYSLOGHOST:hostname} <(?<priority>[0-9]+)> (?<applicationName>[^\[]+)\[pid=(?<processId>[^\]]*)\]: \[msgid=(?<messageId>[^\]]+)\] \[sd=(?<structuredData>[^\]]+)\] +%{GREEDYDATA:slim_message}"]
            add_tag => [ "kafka-sender" ]
            add_field => {
		"tool" => "Syslog"
                "syslogMessage" => "%{message}"
                "header" => "%{priority} %{version} %{timestamp} %{hostname} %{applicationName} %{processId} %{messageId}"
            }
        }
        mutate {
            rename => [ "slim_message", "message" ]
        }

        mutate {
                convert => {
                        "version" => "string"
                }
        }

    }
    if [path] == "/PATH/remote_FireEye_UDP_10515.log" or [path] == "/PATH/remote_FireEye_TCP_10515.log" {
        grok {
            patterns_dir => "/PATH/patterns"
            keep_empty_captures => true
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp} v\.(?<version>[0-9]+) %{SYSLOGHOST:hostname} <(?<priority>[0-9]+)> (?<applicationName>[^\[]+)\[pid=(?<processId>[^\]]*)\]: \[msgid=(?<messageId>[^\]]+)\] \[sd=(?<structuredData>[^\]]+)\] +%{GREEDYDATA:slim_message}"]
            add_tag => [ "kafka-sender" ]
            add_field => {
		"tool" => "FireEye"
                "syslogMessage" => "%{message}"
                "header" => "%{priority} %{version} %{timestamp} %{hostname} %{applicationName} %{processId} %{messageId}"
            }
        }
        mutate {
            rename => [ "slim_message", "message" ]
        }

        mutate {
                convert => {
                        "version" => "string"
                }
        }

    }
    if [path] == "/PATH/remote_IPS_UDP_8010.log" or [path] == "/PATH/remote_IPS_TCP_8010.log" {
        grok {
            patterns_dir => "/PATH/patterns"
            keep_empty_captures => true
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp} v\.(?<version>[0-9]+) %{SYSLOGHOST:hostname} <(?<priority>[0-9]+)> (?<applicationName>[^\[]+)\[pid=(?<processId>[^\]]*)\]: \[msgid=(?<messageId>[^\]]+)\] \[sd=(?<structuredData>[^\]]+)\] +%{GREEDYDATA:slim_message}"]
            add_tag => [ "kafka-sender" ]
            add_field => {
		"tool" => "IPS"
                "syslogMessage" => "%{message}"
                "header" => "%{priority} %{version} %{timestamp} %{hostname} %{applicationName} %{processId} %{messageId}"
            }
        }
        mutate {
            rename => [ "slim_message", "message" ]
        }

        mutate {
                convert => {
                        "version" => "string"
                }
        }

    }
    if [path] == "/PATH/remote_Radius_UDP_8012.log" or [path] == "/PATH/remote_Radius_TCP_8012.log" {
        grok {
            patterns_dir => "/PATH/patterns"
            keep_empty_captures => true
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp} v\.(?<version>[0-9]+) %{SYSLOGHOST:hostname} <(?<priority>[0-9]+)> (?<applicationName>[^\[]+)\[pid=(?<processId>[^\]]*)\]: \[msgid=(?<messageId>[^\]]+)\] \[sd=(?<structuredData>[^\]]+)\] +%{GREEDYDATA:slim_message}"]
            add_tag => [ "kafka-sender" ]
            add_field => {
		"tool" => "Radius"
                "syslogMessage" => "%{message}"
                "header" => "%{priority} %{version} %{timestamp} %{hostname} %{applicationName} %{processId} %{messageId}"
            }
        }
        mutate {
            rename => [ "slim_message", "message" ]
        }

        mutate {
                convert => {
                        "version" => "string"
                }
        }

    }
    if [path] == "/PATH/remote_Tacacs_UDP_8013.log" {
        grok {
            patterns_dir => "/PATH/patterns"
            keep_empty_captures => true
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp} v\.(?<version>[0-9]+) %{SYSLOGHOST:hostname} <(?<priority>[0-9]+)> (?<applicationName>[^\[]+)\[pid=(?<processId>[^\]]*)\]: \[msgid=(?<messageId>[^\]]+)\] \[sd=(?<structuredData>[^\]]+)\] +%{GREEDYDATA:slim_message}"]
            add_tag => [ "kafka-sender" ]
            add_field => {
		"tool" => "Tacacs"
                "syslogMessage" => "%{message}"
                "header" => "%{priority} %{version} %{timestamp} %{hostname} %{applicationName} %{processId} %{messageId}"
            }
        }
        mutate {
            rename => [ "slim_message", "message" ]
        }

        mutate {
                convert => {
                        "version" => "string"
                }
        }

    }
}

output {
  stdout {
    codec => rubydebug
  }
  ingestor {
    schemaFile => "/PATH/syslog_5424.avsc"
    brokerList => "localhost:9092"
    requiredAcks => true
    isAsync => true
    batchNumMessages => 300
    successTopic => "BR.logs.success"
    failureTopic => "BR.all.failure"
  }
}
