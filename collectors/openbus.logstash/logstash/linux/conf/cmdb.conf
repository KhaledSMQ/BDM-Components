input {
    file {
      type => "LogicalServerData"
      path => "/PATH/data/*_LS_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_LS"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
    file {
      type => "HyperData"
      path => "/PATH/data/*_HYPERVISOR_DATA_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_HYPERVISOR"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
    file {
      type => "ComputerSystemData"
      path => "/PATH/data/*_COMPUTERSYSTEM_DATA_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_COMPUTERSYSTEM"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
    file {
      type => "WasData"
      path => "/PATH/data/*_WASSERVER_DATA_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_WASSERVER"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
    file {
      type => "DatabaseData"
      path => "/PATH/data/*_DBBYLSERVER_DATA_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_DBBYLSERVER"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
    file {
      type => "InfoApplication"
      path => "/PATH/data/BR_INFO_APP.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_INFO_APP"
      codec => plain {
        charset => "ISO-8859-1"
      }
      add_field => {
        "bypass" => true
      }
    }
    file {
      type => "InfoRobots"
      path => "/PATH/data/*_INFO_ROBOS_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_INFO_ROBOS"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
    file {
      type => "Services"
      path => "/PATH/data/*_SERVICES_*.csv"
      start_position => "beginning"
      sincedb_path => "/PATH/offsets/sincedb_SERVICES"
      codec => plain {
        charset => "ISO-8859-1"
      }
    }
}
 
filter {

  if ("true" not in [bypass]) {
    grok {
      match => [ "path", "%{GREEDYDATA}/%{GREEDYDATA:filename}\.csv" ]
      match => [ "filename", "(?<tenant>[A-Za-z]{3}$)" ]
      match => [ "filename", "(?<date>^\d{8})" ]
      break_on_match => false
    }

    ruby {
      code => "
      	require 'date'
      	date = Date.strptime(event['date'],'%Y%m%d')
      	event['timestamp'] = date.to_time.to_i
      "
    }
  } else {
    grok {
      match => [ "path", "%{GREEDYDATA}/%{GREEDYDATA:filename}\.csv" ]
      match => [ "filename", "(?<tenant>^[A-Za-z]*)" ]
      break_on_match => false
    }
  }

  mutate {
    convert => { "timestamp" => "string" }
  }

  if [type] == "LogicalServerData" {
    csv {
        separator => ";"
        columns => [ "LS ID" , "LS Name" , "LS Delivery" , "LS Company" , "LS Env" , "LS Status" , "LS VDC" , "LS DistNtw" , "LS Item" , "LS Function" , "LS Platform" , "LS OS" , "LS Patch Level" , "LS S/N" , "LS Procs" , "LS Floor" , "LS Mgmt Console" , "LS Monitoring by policy" , "LS Required Monitoring" , "LS Site" , "LS Create Date" , "LS Third Party" , "LS BL Target" , "LS BL Exception" , "LS HWAdmIP" , "LS IP Admin" , "LS IP Address" ,"LS Phisical Memory","LS_HYP Grp" , "HYP Grp ID" , "HYP Grp Name" , "HYP Grp Delivery" , "HYP Grp Company" , "HYP Grp Env" , "HYP Grp Status" , "LS_HYP" , "HYP ID" , "HYP Name" , "HYP Delivery" , "HYP Company" , "HYP Env" , "HYP Status" , "LS_CS " , "CS ID" , "CS Name" , "CS Delivery" , "CS Company" , "CS Status" , "CS VDC" , "CS DistNtw" , "CS Manufacturer" , "CS Model" , "CS S/N" , "LS_SC" , "SC ID" , "SC Name" , "SC Delivery" , "SC Company" , "SC Env" , "SC Status" , "SC_TS" , "TS ID" , "TS Name" , "TS Delivery" , "TS Company" , "TS Env" , "TS Status" , "BS ID" , "BS Name" , "BS Delivery" , "BS Company" , "BS Env" , "BS Status" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.LogicalServerData"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "LS Name" => "logicalServerName"
        "LS Company" => "logicalServerCompany"
        "LS Env" => "logicalServerEnv"
        "LS Status" => "logicalServerStatus"
        "LS VDC" => "logicalServerVdc"
        "LS DistNtw" => "logicalServerDistntw"
        "LS Function" => "logicalServerFunction"
        "LS Platform" => "logicalServerPlatform"
        "HYP ID" => "hyperId"
        "HYP Name" => "hyperName"
        "CS ID" => "computerSystemId"
		    "CS Name" => "computerSystemName"
        "SC Name" => "serviceComponentName"
        "TS Name" => "technicalServiceName"
        "BS Name" => "businessServiceName"
        "LS ID"   => "lsId"
        "LS Item" => "lsItem"
        "LS OS"   => "lsOS"
        "LS Patch Level" => "lsPatchLevel"
        "CS Manufacturer" => "csManufacturer"
        "CS Model" => "csModel"
      }
    }

    if [logicalServerName] == "LS Name" {
		  drop { }
    }
  }

  if [type] == "HyperData" {
    csv {
      separator => ";"
      columns => [ "HYP Name" , "HYP ID" , "HYP Company" , "HYP Delivery" , "HYP VDC" , "HYP Distr Ntw" , "HYP Env" , "HYP Status" , "HYP Category" , "HYP Type" , "HYP Item" , "HYP_Admve_FQDN" , "Rel CS-HYP" ,"HYP_Memory","Rel CS-HYP", "CS Type" , "CS Name" , "CS ID" , "CS Company" , "CS Delivery" , "CS Env" , "CS_Status" , "Rel HYP-CLU" , "CLU Name" , "CLU ID" , "CLU Company" , "CLU Delivery" , "CLU Env" , "CLU Status" , "Rel LS" , "LS Name" , "LS ID" , "LS Company" , "LS Delivery" , "LS Env" , "LS Status" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.HyperData"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "HYP ID" => "hyperId"
        "HYP Name" => "hyperName"
        "HYP Distr Ntw" => "hyperNetwork"
        "HYP Env" => "hyperEnvironment"
        "HYP_Admve_FQDN" => "hyperFQDN"
        "CS Type" => "computerSystemType"
        "CS Name" => "computerSystemName"
        "CLU ID" => "hyperClusterId"
        "CLU Name" => "hyperClusterName"
		    "CS ID" => "csId"
      }
    }

    if [hyperName] == "HYP Name" {
		  drop { }
    }
  }

  if [type] == "ComputerSystemData" {
    csv {
      separator => ";"
      columns => [ "NAME" , "ASSETID" , "TAGNUMBER" , "SERIALNUMBER" , "COMPANY" , "DELIVERYUNIT" , "VIRTUALDC" , "REDDISTRIBUCION" , "FUNTIONALENVIRONMENT" , "SITE" , "ROOM" , "ASSETLIFECYCLESTATUS" , "CATEGORY" , "TYPE" , "ITEM" , "MANUFACTURERNAME" , "PRODUCT" , "VERSION" , "RELATION_LSYSTEM" , "TYPE_LSYSTEM" , "NAME_LSYSTEM" , "ASSETID_LSYSTEM" , "COMPANY_LSYSTEM" , "DELIVERYUNIT_LSYSTEM" , "FUNTIONALENVIRONMENT_LSYSTEM" , "ASSETLIFECYCLESTATUS_LSYSTEM" , "VIRTUALDC_LSYSTEM" , "REDDISTRIBUCION_LSYSTEM" , "HARDWAREADMINIP_LSYSTEM" , "RELATION_Comm MONITOR" , "TYPE_Comm MONITOR" , "NAME_Comm MONITOR" , "ASSETID_Comm MONITOR" , "COMPANY_Comm MONITOR" , "DELIVERYUNIT_Comm MONITOR" , "FUNTIONALENVIRONMENT_Comm MONITOR" , "ASSETLIFECYCLESTATUS_Comm MONITOR" , "RELATION_TELEPRESENCE" , "TYPE_TELEPRESENCE" , "NAME_TELEPRESENCE" , "ASSETID_TELEPRESENCE" , "COMPANY_TELEPRESENCE" , "DELIVERYUNIT_TELEPRESENCE" , "FUNTIONALENVIRONMENT_TELEPRESENCE" , "ASSETLIFECYCLESTATUS_TELEPRESENCE" , "RELATION_VOICOMME" , "TYPE_VOICOMME" , "NAME_VOICOMME" , "ASSETID_VOICOMME" , "COMPANY_VOICOMME" , "DELIVERYUNIT_VOICOMME" , "FUNTIONALENVIRONMENT_VOICOMME" , "ASSETLIFECYCLESTATUS_VOICOMME" , "RELATION_COMMEL" , "TYPE_COMMEL" , "NAME_COMMEL" , "ASSETID_COMMEL" , "COMPANY_COMMEL" , "DELIVERYUNIT_COMMEL" , "FUNTIONALENVIRONMENT_COMMEL" , "ASSETLIFECYCLESTATUS_COMMEL" , "RELATION_SECURITYSYSTEM" , "TYPE_SECURITYSYSTEM" , "NAME_SECURITYSYSTEM" , "ASSETID_SECURITYSYSTEM" , "COMPANY_SECURITYSYSTEM" , "DELIVERYUNIT_SECURITYSYSTEM" , "FUNTIONALENVIRONMENT_SECURITYSYSTEM" , "ASSETLIFECYCLESTATUS_SECURITYSYSTEM" , "RELATION_NTWSC" , "TYPE_NTWSC" , "NAME_NTWSC" , "ASSETID_NTWSC" , "COMPANY_NTWSC" , "DELIVERYUNIT_NTWSC" , "FUNTIONALENVIRONMENT_NTWSC" , "ASSETLIFECYCLESTATUS_NTWSC" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.ComputerSystemData"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "ASSETID" => "csId"
		    "NAME" => "csName"
        "DELIVERYUNIT" => "csDelivery"
        "REDDISTRIBUCION" => "csNetwork"
        "FUNTIONALENVIRONMENT" => "csEnvironment"
        "SITE" => "csSite"
        "TYPE" => "csType"
      }
    }

    if [csName] == "NAME" {
		  drop { } 
    }
  }

  if [type] == "WasData" {
    csv {
      separator => ";"
      columns => [ "WAS Name" , "WAS ID" , "WAS Company" , "WAS Delivery" , "WAS Env" , "WAS Status" , "WAS Item" , "WAS VDC" , "WAS Distribution Network" , "WAS Manufacturer" , "WAS Product Name" , "WAS Model/Version" ,"WAS Fix Pack","WAS Create Date", "Rel WAS-LS" , "LS Name" , "LS ID" , "LS Company" , "LS Delivery" , "LS Env" , "LS Status" , "Rel WAS-SC" , "SC Name" , "SC ID" , "SC Company" , "SC Delivery" , "SC Env" , "SC Status" , "Rel SC-TS" , "TS Name" , "TS ID" , "TS Company" , "TS Delivery" , "TS Env" , "TS Status" , "Rel TS-BS" , "BS Name" , "BS ID" , "BS Company" , "BS Delivery" , "BS Env" , "BS Status" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.CmdbWas"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "WAS Name" => "wasName"
        "WAS Company" => "wasCompany"
        "WAS Delivery" => "wasDelivery"
        "WAS Env" => "wasEnvironment"
        "WAS Status" => "wasStatus"
        "WAS Item" => "wasItem"
        "WAS VDC" => "wasVDC"
        "WAS Distribution Network" => "wasDistributionNetwork"
        "WAS Manufacturer" => "wasManufacturer"
        "WAS Product Name" => "wasProductName"
        "WAS Model/Version" => "wasModelVersion"
        "SC Name" => "wasServiceComponent"
        "TS Name" => "wasTechnicalService"
        "BS Name" => "wasBusinessService"
        "LS Name" => "logicalServerName"
      }
    }

    if [wasName] == "WAS Name" {
		  drop { }
    }
  }

  if [type] == "DatabaseData" {
    csv {
      separator => ";"
      columns => [ "NAME" , "ASSETID" , "COMPANY" , "DELIVERYUNIT" , "FUNTIONALENVIRONMENT" , "ASSETLIFECYCLESTATUS" , "TYPE" , "DBNAME" , "DNS" , "VDC" , "DISTRIBUTION_NETWORK" , "PRIORITY" ,"CREATEDATE", "RELATIONSHIP_DBINSTANCE" , "TYPE_DBINSTANCE" , "NAME_DBINSTANCE" , "SERVER_USER" , "ASSETID_DBINSTANCE" , "COMPANY_DBINSTANCE" , "DELIVERY_DBINSTANCE" , "FUNTIONALENVIRONMENT_DBINSTANCE" , "ASSETLIFECYCLESTATUS_DBINSTANCE" , "INSTANCENAME_DBINSTANCE" , "DBMANAGER_DBINSTANCE", "RELATIONSHIP_CLUSTER" , "TYPE_CLUSTER" , "NAME_CLUSTER" , "ASSETID_CLUSTER" , "COMPANY_CLUSTER" , "DELIVERY_CLUSTER" , "FUNTIONALENVIRONMENT_CLUSTER" , "ASSETLIFECYCLESTATUS_CLUSTER" , "RELATIONSHIP_LSERVER" , "TYPE_LSERVER" , "NAME_LSERVER" , "ASSETID_LSERVER" , "COMPANY_LSERVER" , "DELIVERY_LSERVER" , "FUNTIONALENVIRONMENT_LSERVER" , "ASSETLIFECYCLESTATUS_LSERVER" , "RELATIONSHIP_SCOMM" , "TYPE_SCOMM" , "NAME_SCOMM" , "ASSETID_SCOMM" , "COMPANY_SCOMM" , "DELIVERY_SCOMM" , "FUNTIONALENVIRONMENT_SCOMM" , "ASSETLIFECYCLESTATUS_SCOMM" , "RELATIONSHIP_TECHSERV" , "TYPE_TECHSERV" , "NAME_TECHSERV" , "ASSETID_TECHSERV" , "COMPANY_TECHSERV" , "DELIVERY_TECHSERV" , "FUNTIONALENVIRONMENT_TECHSERV" , "ASSETLIFECYCLESTATUS_TECHSERV_SCOMM" , "BS ID" , "BS Name" , "BS Company" , "BS Delivery" , "BS Env" , "BS Status" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.CmdbDatabase"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "NAME" => "dbcName"
        "ASSETID" => "assetId"
        "COMPANY" => "dbcCompany"
        "DELIVERYUNIT" => "dbcDelivery"
        "FUNTIONALENVIRONMENT" => "dbcEnvironment"
        "ASSETLIFECYCLESTATUS" => "dbcStatus"
        "TYPE" => "dbcType"
        "DBNAME" => "dbcRealName"
        "VDC" => "dbcVdc"
        "DISTRIBUTION_NETWORK" => "dbcNetwork"
        "TYPE_DBINSTANCE" => "dbiType"
        "NAME_DBINSTANCE" => "dbiName"
        "SERVER_USER" => "dbiUser"
        "NAME_LSERVER" => "dbiLServer"
        "COMPANY_DBINSTANCE" => "dbiCompany"
        "DELIVERY_DBINSTANCE" => "dbiDelivery"
        "FUNTIONALENVIRONMENT_DBINSTANCE" => "dbiEnvironment"
        "ASSETLIFECYCLESTATUS_DBINSTANCE" => "dbiStatus"
        "INSTANCENAME_DBINSTANCE" => "dbiRealName"
        "ASSETID_SCOMM" => "scAssetid"
      }
    }

    if [dbcName] == "NAME" {
      drop { }
    }
  }

  if [type] == "InfoApplication" {
  	csv {
      separator => ";"
  	  columns => [ "NOME_SERVIDOR" , "IP_SERVIDOR" ]
  	}
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.InfoApplication"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "NOME_SERVIDOR" => "serverName"
        "IP_SERVIDOR" => "serverIp"
      }
    }

    if [serverName] == "NOME_SERVIDOR" {
      drop { }
    }

  }

  if [type] == "InfoRobots" {
    csv {
      separator => ";"
      columns => [ "CD_SIGLA" , "NR_SEQU_ROBO" , "NM_ALIAS_SIST" , "NM_ALIAS_ROBO" , "DS_URL" , "NM_METR" , "NM_GRUP_ROBO" , "CD_VDC_CMDB" , "NM_CLI_CMDB" , "NM_BS_CMDB" , "NM_TS_CMDB" , "NR_FATAL_MENR" , "NR_CRIT_MENR" , "NR_WARN_MENR" , "NR_FATAL_MAIR" , "NR_CRIT_MAIR" , "NR_WARN_MAIR" , "IN_THRE" , "NR_THRE" , "CD_ROBO_ID" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.InfoRobots"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
        "CD_ROBO_ID" => "robotId"
        "NM_ALIAS_SIST" => "systemName"
        "NM_ALIAS_ROBO" => "robotUseCase"
        "DS_URL" => "url"
        "NM_METR" => "metricName"
        "NM_GRUP_ROBO" => "groupRobot"
      }
    }
    if [robotId] == "CD_ROBO_ID" {
      drop { }
    }
  }
  
  if [type] == "Services" {
    csv {
      separator => ";"
      columns => [ "BS_ASSETID" , "BS_NAME" , "BS_ENV" , "BS_STATUS" , "BS_COMPANY" , "BS Target" , "BS_WEIGHT" , "TS_ASSETID" , "TS_NAME" , "TS_ENV" , "TS_STATUS" , "TS_COMPANY" , "TS_No SLA Time (%)" , "TS_DEL" , "TS_WEIGHT" , "SC_ASSETID" , "SC_NAME" , "SC_ENV" , "SC_STATUS" , "SC_COMPANY" , "SC_DEL" , "ITEM" , "SIGLAS()" , "DELIVERY" , "Contagem de LS_ASSETID" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.enrichment.Services"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
		"BS_ASSETID" 		=> "bsAssetid"
		"BS_NAME" 			=> "bsName"
		"BS_ENV" 			=> "bsEnv"
		"BS_STATUS" 		=> "bsStatus"
		"BS_COMPANY" 		=> "bsCompany"
		"BS Target" 		=> "bsTarget"
		"BS_WEIGHT" 		=> "bsWeight"
		"TS_ASSETID" 		=> "tsAssetid"
		"TS_NAME" 			=> "tsName"
		"TS_ENV" 			=> "tsEnv"
		"TS_STATUS" 		=> "tsStatus"
		"TS_COMPANY" 		=> "tsCompany"
		"TS_No SLA Time (%)" => "tsNoSlaTime"
		"TS_DEL" 			=> "tsDel"
		"TS_WEIGHT" 		=> "tsWeight"
		"SC_ASSETID" 		=> "scAssetid"
		"SC_NAME" 			=> "scName"
		"SC_ENV" 			=> "scEnv"
		"SC_STATUS" 		=> "scStatus"
		"SC_COMPANY" 		=> "scCompany"
		"SC_DEL" 			=> "scDel"
		"ITEM"				=> "scItem"
		"SIGLAS()" 			=> "scSiglas"
		"DELIVERY" 			=> "scDelivery"
		"Contagem de LS_ASSETID" => "totaLsAssetid"
      }
    }
    if [bsAssetid] == "BS_ASSETID" {
      drop { }
    }
  }  

  if [type] == "Services" {
    csv {
      separator => ";"
      columns => [ "BS_ASSETID" , "BS_NAME" , "BS_ENV" , "BS_STATUS" , "BS_COMPANY" , "BS Target" , "BS_WEIGHT" , "TS_ASSETID" , "TS_NAME" , "TS_ENV" , "TS_STATUS" , "TS_COMPANY" , "TS_No SLA Time (%)" , "TS_DEL" , "TS_WEIGHT" , "SC_ASSETID" , "SC_NAME" , "SC_ENV" , "SC_STATUS" , "SC_COMPANY" , "SC_DEL" , "ITEM" , "SIGLAS()" , "DELIVERY" , "Contagem de LS_ASSETID" ]
    }
    mutate {
      add_field => {
        "schema_class" => "br.com.produban.openbus.model.avro.enrichment.Services"
      }
      add_tag => [ "kafka-sender" ]
      rename => {
		"BS_ASSETID" 		=> "bsAssetid"
		"BS_NAME" 			=> "bsName"
		"BS_ENV" 			=> "bsEnv"
		"BS_STATUS" 		=> "bsStatus"
		"BS_COMPANY" 		=> "bsCompany"
		"BS Target" 		=> "bsTarget"
		"BS_WEIGHT" 		=> "bsWeight"
		"TS_ASSETID" 		=> "tsAssetid"
		"TS_NAME" 			=> "tsName"
		"TS_ENV" 			=> "tsEnv"
		"TS_STATUS" 		=> "tsStatus"
		"TS_COMPANY" 		=> "tsCompany"
		"TS_No SLA Time (%)" => "tsNoSlaTime"
		"TS_DEL" 			=> "tsDel"
		"TS_WEIGHT" 		=> "tsWeight"
		"SC_ASSETID" 		=> "scAssetid"
		"SC_NAME" 			=> "scName"
		"SC_ENV" 			=> "scEnv"
		"SC_STATUS" 		=> "scStatus"
		"SC_COMPANY" 		=> "scCompany"
		"SC_DEL" 			=> "scDel"
		"ITEM"				=> "scItem"
		"SIGLAS()" 			=> "scSiglas"
		"DELIVERY" 			=> "scDelivery"
		"Contagem de LS_ASSETID" => "totaLsAssetid"
      }
    }
    if [bsAssetid] == "BS_ASSETID" {
      drop { }
    }
  }

}
 

output {

#  stdout {
#    codec => rubydebug
#  }
if "kafka-sender" in [tags] {
    kafka {
      broker_list => "localhost:9092"
      topic_id => "openbus.enrichment"
      serializer_class => "br.com.produban.openbus.encoders.KafkaAvroEncoder"
    }
  }
}
